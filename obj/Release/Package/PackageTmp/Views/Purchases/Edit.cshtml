@model SkyFan.Models.Purchase

@{
    ViewBag.Title = "Edit";
}
<style>
    option:empty {
        display: none;
    }
</style>
<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Purchase</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)


        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @Value = DateTime.Today.ToString("d") } })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.VendorProduct.VendorID, "Vendor Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.DropDownList("VendorID", null, "Please select Vendor", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.VendorProduct.VendorID, "", new { @class = "text-danger" })
            </div>
        
            @Html.LabelFor(model => model.VendorProductID, "Vendor Product", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.DropDownList("VendorProductID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.VendorProductID, "", new { @class = "text-danger" })
            </div>
        </div>

        

        <div class="form-group">
            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
            </div>
        
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.AmountToPay, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.AmountToPay, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AmountToPay, "", new { @class = "text-danger" })
            </div>
       
            @Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Total, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Total, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.PaymentVia, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @*@Html.EditorFor(model => model.PaymentVia, "Cash", new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.RadioButtonFor(model => model.PaymentVia, "Cash", new { htmlAttributes = new { @class = "radio" } })
                @Html.Label("Cash", "Cash")
                @Html.RadioButtonFor(model => model.PaymentVia, "Checque", new { htmlAttributes = new { @class = "radio" } })
                @Html.Label("Checque", "Checque")
                @Html.ValidationMessageFor(model => model.PaymentVia, "", new { @class = "text-danger" })
            </div>
        </div>

        

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="~/Scripts/jquery-1.10.2.js"></script>
<script>

    $(document).ready(function () {



        $("#VendorID").change(function () {

            $.get("/Purchases/GetVProductList", { VendorID: $("#VendorID").val() }, function (data) {
                $("#VendorProductID").empty();

                $.each(data, function (index, row) {
                    $("#VendorProductID").append("<option value='" + row.ID + "'>" + row.Name + "<option>")
                    $("#Remaining").append("<option value='" + row.ID + "'>" + row.Quantity + "<option>")


                });



            });

        })

    });




    $(function () {

        $("#Quantity,#Price").keyup(function (e) {

            var q = $("#Quantity").val();
            var p = $("#Price").val();
            var result = "";

            if (q !== "" && p !== "" && $.isNumeric(q) && $.isNumeric(p)) {
                result = parseFloat(q) * parseFloat(p);
            }
            $("#Total").val(result);

        });

    });
</script>
